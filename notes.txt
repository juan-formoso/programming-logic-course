*Ciclo de Desenvolvimento de Software*
	Estágio 1 - Idealização = Montar a ideia
	Estágio 2 - Especificação de Requisitos = Documentar os requisitos
	Estágio 3 - Validação da Solução = Verifica se é aquilo que o cliente (ou vc) quer
	Estágio 4 - Desenvolvimendo e Testes = Coding
	Estágio 5 - Implantação e Entrega = Ir ao cliente (ou vc) entregar a ele(a) e subir na "web"


*O problema que todo iniciante sofre*
"Me solta! Deixa eu começar a codar!"
	- Todo iniciante inexperiente

	Erro #1 de quase todo iniciante: querer iniciar o código antes de entender o problema e realizar o algoritmo.

	*Todos* passam por isso:
		- Normal #1 - vai escrever código lentamente
		- Normal #2 - vai resolver os mesmos problemas em situações diferentes
		- Normal #3 - vai se achar incapaz/insuficiente
		- Normal #4 - vai gradualmente conseguir resolver problemas mais facilmente.

-> Embora não tenha seja escrito nenhum código, o problema deve ser solucionado e isso é o que importa! :)
-> Pensar na resolução do problema é tão importante quanto aprender a programar.


*O que são algoritmos?*
	- Uma série de instruções a serem seguidas para resolver um problema.

	- Qual a estratégia para montar um algoritmo? MÉTODO 5Qs!
		- Analise criticamente o problema e descubra: Tente explicar este problema para você mesmo em voz alta e peça mais informações/investigue mais até vocẽ compreender completamente o problema.
			1. Quais são os dados de entrada necessários?
			2. O que devo fazer com estes dados?
			3. Quais são as restrições deste problema?
			4. Qual é o resultado esperado?
			5. Qual é a sequência de passos a ser feitas para chegar ao resultado esperado?


*4 Conceitos OBRIGATÓRIOS para ser capaz de resolver problemas!*

1. Variáveis
2. Condicionais
3. Laços de repetição
4. Coleções

1) VARIÁVEIS
  - Armazena dados -> boolean, string and numbers.
  - informações como datas, coisas para comprar no mercado, nome de pessoas.

2) CONDICIONAIS
  - Quando algguém te oferece um panfleto na rua vocẽ pega ele sem pensar?
  - Quando descobre que algo que você quer muito comprar está em promoção, você compra sem pensar?

3) LAÇOS DE REPETIÇÃO
  - No mundo real e na programação, temos diversas situações onde precisamos fazer uma ação várias vezes ou por uma determinada quantidade de vezes. Ex: cortar um pão, varrer o chão.
  - Laços de repetição em casos real (games): para derrubar uma árvore em um jogo são necessárias 11 machadadas.
  - Outro exemplo: Crie um programa que recebe um número e o incrementa 1 por 10 vezes.
    > valor = 10
    > 1° repetição | valor = valor + 1 | 11
    > 2° repetição | valor = valor + 1 | 12
    > 3° repetição | valor = valor + 1 | 13
    > 4° repetição | valor = valor + 1 | 14
    > 5° repetição | valor = valor + 1 | 15
    > 6° repetição | valor = valor + 1 | 16
    > 7° repetição | valor = valor + 1 | 17
    > 8° repetição | valor = valor + 1 | 18
    > 9° repetição | valor = valor + 1 | 19
    > 10° repetição | valor = valor + 1 | 20
  - Ponto em comum: normalmente possuem um ponto inicial e um ponto final, ou em alguns casos uma condição que irá significar o final daquele laço de repetição. Ex: encha o copo de água até que ele fique cheio.
  - Pontos chaves:
    > Úteis para conseguir automatizar processos.
    > É possível definir por quantas vezes algo deve ser executado.
    > Pontos de início e fim.
    > Podem estar atrelados a uma condição.

4)COLEÇÕES
  Em muitos casos, você terá necessidade de trabalhar com coleções de valores que estão armazenados em um local só, ex:
    - convidados = ['Jeff', 'Amanda', 'Carol', 'Robert']
    - numeros_premiados = [12, 67, 34, 100, 55]
    - Cada linguagem teu seu tipo, python por ex: listas e arrays.

*SEMPRE PESQUISAR NO GOOGLE CASO NÃO SAIBA FAZER ALGO! SEMPRE!*